{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","io","on","socket","callback","name","room","id","error","user","join","emit","text","role","broadcast","to","users","message","use","route","PORT","process","env","listen","console","log"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport socketio from 'socket.io';\r\nimport http from 'http';\r\nimport cors from 'cors';\r\nimport route from './router';\r\nimport {\r\n  addUser,\r\n  removeUser,\r\n  getUser,\r\n  getUsersInRoom\r\n} from './controllers/users.js';\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server);\r\n\r\nio.on('connect', socket => {\r\n  socket.on('join', ({ name, room }, callback) => {\r\n    const { error, user } = addUser({ id: socket.id, name, room });\r\n\r\n    if (error) return callback(error);\r\n\r\n    socket.join(user.room);\r\n\r\n    socket.emit('message', {\r\n      user: 'admin 🗣️',\r\n      text: `${user.name} , welcome to room ${user.room}.`,\r\n      role: 'admin'\r\n    });\r\n    socket.broadcast\r\n      .to(user.room)\r\n      .emit('message', {\r\n        user: 'admin 🗣️ ',\r\n        text: `${user.name} has joined!`,\r\n        role: 'admin'\r\n      });\r\n\r\n    io.to(user.room).emit('roomData', {\r\n      room: user.room,\r\n      users: getUsersInRoom(user.room)\r\n    });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('sendMessage', (message, callback) => {\r\n    const user = getUser(socket.id);\r\n\r\n    io.to(user.room).emit('message', { user: user.name, text: message });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    const user = removeUser(socket.id);\r\n\r\n    if (user) {\r\n      io.to(user.room).emit('message', {\r\n        user: 'admin' + '🗣️',\r\n        text: `${user.name} has left.`\r\n      });\r\n      io.to(user.room).emit('roomData', {\r\n        room: user.room,\r\n        users: getUsersInRoom(user.room)\r\n      });\r\n    }\r\n  });\r\n});\r\napp.use(cors());\r\napp.use(route);\r\n\r\nconst PORT = process.env.PORT || 3000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server connected on PORT ${PORT}`);\r\n});\r\n"],"file":"index.js"}