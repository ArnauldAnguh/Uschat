{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","io","on","socket","callback","name","room","id","error","user","join","emit","text","role","when","Date","valueOf","broadcast","to","users","message","use","req","res","next","header","method","status","json","route","PORT","process","env","listen","console","log"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport socketio from 'socket.io';\r\nimport http from 'http';\r\nimport cors from 'cors';\r\nimport route from './router';\r\nimport {\r\n  addUser,\r\n  removeUser,\r\n  getUser,\r\n  getUsersInRoom\r\n} from './controllers/users.js';\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server);\r\n\r\nio.on('connect', socket => {\r\n  socket.on('join', ({ name, room }, callback) => {\r\n    const { error, user } = addUser({ id: socket.id, name, room });\r\n\r\n    if (error) return callback(error);\r\n\r\n    socket.join(user.room);\r\n\r\n    socket.emit('message', {\r\n      user: 'admin 🗣️',\r\n      text: `${user.name} , welcome to room ${user.room}.`,\r\n      role: 'admin',\r\n      when: new Date().valueOf()\r\n    });\r\n    socket.broadcast.to(user.room).emit('message', {\r\n      user: 'admin 🗣️ ',\r\n      text: `${user.name} has joined!`,\r\n      role: 'admin',\r\n      when: new Date().valueOf()\r\n    });\r\n\r\n    io.to(user.room).emit('roomData', {\r\n      room: user.room,\r\n      users: getUsersInRoom(user.room)\r\n    });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('sendMessage', (message, callback) => {\r\n    const user = getUser(socket.id);\r\n\r\n    io.to(user.room).emit('message', {\r\n      user: user.name,\r\n      text: message,\r\n      when: new Date().valueOf()\r\n    });\r\n\r\n    callback();\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    const user = removeUser(socket.id);\r\n\r\n    if (user) {\r\n      io.to(user.room).emit('message', {\r\n        user: 'admin' + '🗣️',\r\n        text: `${user.name} has left.`,\r\n        role: 'admin',\r\n        when: new Date().valueOf()\r\n      });\r\n      io.to(user.room).emit('roomData', {\r\n        room: user.room,\r\n        users: getUsersInRoom(user.room)\r\n      });\r\n    }\r\n  });\r\n});\r\n// CORS Error Handling\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header(\r\n    'Access-Control-Allow-Headers',\r\n    'Origin, X-Requested-With, Content-Type, Accept, Authorization'\r\n  );\r\n  if (req.method === 'OPTIONS') {\r\n    res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET');\r\n    res.status(200).json({});\r\n  }\r\n  next();\r\n});\r\napp.use(route);\r\n\r\nconst PORT = process.env.PORT || 3000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server connected on PORT ${PORT}`);\r\n});\r\n"],"file":"index.js"}